// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
/*컨트롤값(C)어떻게 연결할지 고민.
Mux16, ALU, And, Or, Not...
ARegister, DRegister, PC,*/

/*
차례대로 opcode, comp, dest, jump bit
                1 (11) a cccccc ddd jjj


[15] O -> C
[5] O -> A
[15]   [5]   write?  t1
------------------------
  0     0      1      1
  0     1      1      1
  1     0      0      1
  1     1      1      0
*/


// i[15]와 i[5]가 각각 00, 01, 11일때 write. (10일때 빼고 다 write)
    Not(in=instruction[15], out=Notin15);
    Or(a=Notin15, b=instruction[5], out=writeA);

//instruction[15]가 0이면 0, instruction[0..14]
//instruction[15]가 1이면 aluoutput
    Mux16(
             a[15]=false, a[0..14]=instruction[0..14], 
             b=aluoutput,    /////ALU의 output
             sel=instruction[15],
             out=registerAInput);

// A  
    ARegister(in=registerAInput, load=writeA, out=registerA, out[0..14]=addressM);

//D (3,4,5)
    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=aluoutput, load=writeD, out=registerD);  //instruction[15]=instruction[4]=1일때 로드
//PC에 A register output 들어가도록
    PC(in=registerA, load=jumpToAddress, inc=true, reset=reset, out[0..14]=pc);

//
    Mux16(a=registerA, b=inM, sel=instruction[12], out=y);

//ALU에는 comp bits와 D register의 output, 위 Mux16으로부터 나온 y가 들어가야함.
	


    ALU(
        x=registerD,
        y=y,

     // comp bits
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],

        out=aluoutput,  //A register결정하는 mux16쪽으로 들어가는
        out=outM,
        zr=zr, ng=ng);

//j2=zr=1
    And(a=instruction[1], b=zr, out=jumpZero);
//j3=ng=1
    And(a=instruction[2], b=ng, out=jumpNegative);
//ng, nr 둘다 x  >> Not(a) & Not(b)
    Not(in=ng, out=Nng);
    Not(in=zr, out=Nzr);
    And(a=Nng, b=Nzr, out=Positive);

//ng, nr이 둘다 0이면서 instruction[0]=j3이 1이면 positive점프
    And(a=Positive, b=instruction[0], out=jumpPositive);

//j2=zr=1이거나 j3=ng=1( = =, > < ) 이거나 ng=nr=0, j3=1 이면 (> >)
    Or(a=jumpZero, b=jumpNegative, out=tmpOut);
    Or(a=tmpOut, b=jumpPositive, out=jumpBits);  //////

// C 인스트럭션일때만 주소로 점프 하기위해 
    And(a=instruction[15], b=jumpBits, out=jumpToAddress);
// C 인스트럭션이면 instruction[3]=d3는 true
    And(a=instruction[15], b=instruction[3], out=writeM);

}